from .sock import sock
import socket, logging

log = logging.getLogger(__name__)

class exploited(tube):
    r"""Transforms a socket to a post-exploitation object.

    * Set up an encrypted connection, using Diffie-Hellman and RC4.

    This class then wraps the encrypted connection and allows ELF-files to be sent to the remote
    process and run.

    Args:

    Examples:

    """

    def __init__(self, remote):
        import curve25519
        from hashlib import sha256
        from Crypto.Cipher import ARC4
        self.remote = remote
        self.dec_rc4 = None
        self.enc_rc4 = None

        # Load dynelf
        self.load_elf("dynelf.elf", "dynelf_start")

        # Load encryption
        self.load_elf("dh.o", "enable_encryption")

        # Diffie-Hellman
        priv = curve25519.keys.Private()
        pub = priv.get_public()
        remote.recvuntil("ECDH")
        remote.send(pub.serialize())
        pub = curve25519.Public(remote.recvn(32))
        key = priv.get_shared_key(pub, lambda x: sha256(x).digest())
        # Setup RC4 connections
        self.dec_rc4 = ARC4.new(key)
        self.enc_rc4 = ARC4.new(key)

    def load_elf(self, filename, fun_name):
        self.recvuntil('LOADER')
        with open(filename, 'r') as f:
            data = f.read()

        remote.send(p32(len(data))+data)
        remote.send(fun_name + "\x00")

    def recv_raw(self, numb):
        data = self.remote.recv(numb)
        if self.dec_rc4:
            return self.dec_rc4.decrypt(data)
        else:
            return data

    def send_raw(self, data):
        if self.enc_rc4:
            return self.remote.send(enc_rc4.encrypt(data))
        else:
            return self.remote.send(data)

    def settimeout_raw(self, timeout):
        return self.remote.settimeout_raw(timeout)

    def timeout_change(self):
        return self.remote.timeout_change()

    def can_recv_raw(self, timeout):
        return self.remote.can_recv_raw(timeout)

    def connected_raw(self, direction):
        return self.remote.connected_raw(direction)
